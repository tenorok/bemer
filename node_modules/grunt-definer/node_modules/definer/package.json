{
  "name": "definer",
  "description": "Easiest module system",
  "version": "0.2.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/tenorok/definer.git"
  },
  "author": {
    "name": "Artem Kurbatov",
    "email": "mail@tenorok.ru"
  },
  "license": "MIT",
  "dependencies": {
    "vow": "~0.3.11",
    "walk": "~2.2.1",
    "graceful-fs": "~2.0.1",
    "underscore": "~1.5.2",
    "commander": "~2.1.0",
    "cli-color": "~0.2.3",
    "moment": "~2.5.1"
  },
  "devDependencies": {
    "mocha": "~1.15.1",
    "chai": "~1.8.1",
    "jsdoc": "~3.3.0"
  },
  "main": "main.js",
  "bin": {
    "definer": "./bin/definer"
  },
  "scripts": {
    "test": "mocha --reporter list test/ test/maker/",
    "jsdoc": "jsdoc -d jsdoc maker.js"
  },
  "readme": "# Definer — самая простая модульная система для JavaScript на клиенте\n\nDefiner предназначен для удобной разработки. С его помощью можно использовать модули и указывать их зависимости, по которым в дальнейшем будет выполнена сборка. В результирующем файле не будет модульной системы, поэтому конечный пользователь не получит лишний код, реализующий модули.\n\n## Использование\n\n### Установка\n\n    npm install definer\n\n### Подключение\n\nДостаточно подключить [один файл](https://github.com/tenorok/definer/blob/master/definer.js).\n```html\n<script src=\"definer.js\"></script>\n```\n\n### Объявление модулей\n\nПусть есть модули `a` и `b`, и модуль `c`, зависящий от них.\n\n```javascript\nvar a = definer('a', function() { return 'a'; }); // a\nvar b = definer('b', function() { return 'b'; }); // b\nvar c = definer('c', function(a, b) { return a + b + 'c'; }); // abc\n```\n\nМодули должны быть объявлены в правильной последовательности, иначе возникнет ошибка.\n\n```javascript\ndefiner('b', function(a) {}); // ReferenceError: module a is not defined\ndefiner('a', function() {});\n```\n\n### Экспорт в глобальный контекст\n\nВнутри модулей `this` указывает на глобальный контекст. Используя это, модуль может легко экспортировать данные.\n\n```javascript\ndefiner('d', function() { this.d = 100; }); // Появилась глобальная переменная d\n```\n\n### Методы\n\n#### Метод `export`\n\nПри выполнении собранного результата из Node.js в объект `module.exports` будет добавлен ключ `d` со значением `100`.\n\nПри выполнении в браузере будет создана аналогичная глобальная переменная.\n\n```javascript\ndefiner.export('d', function() { return 100; });\n```\n\n#### Метод `clean`\n\nВ качестве параметра метод `clean` принимает имя глобальной переменной или массив имён.\n\nУказанные переменные удалятся из глобального контекста и будут объявлены одноимённые модули.\n\nНапример, скроем jQuery в модуль:\n\n```javascript\ndefiner.clean('$');\nconsole.log($); // undefined\ndefiner('a', function($) { $('html').text('a'); });\n```\n\nОчистка сразу нескольких переменных:\n\n```javascript\ndefiner.clean(['$', '_']);\n```\n\n[См. также: опция clean](#Опция-clean)\n\n### Сборка\n\nПредставим, что имеется следующая файловая структура:\n\n```\nmodules/\n    sub/c.js\n    a.js\n    b.js\n```\n\nНаходясь в директории `modules` для сборки проекта достаточно выполнить одну команду.\n\n    ./node_modules/.bin/definer all.js\n\nВ процессе сборки definer выполнит рекурсивный поиск модулей в файлах `*.js` текущей директории и собранный результат будет сохранён в файл `all.js`:\n\n```javascript\n(function(global, undefined) {\nvar a = (function () { return 'a'; }).call(global),\n    b = (function () { return 'b'; }).call(global),\n    c = (function (a, b) { return a + b + 'c'; }).call(global, a, b);\n})(this);\n```\n\n#### Опции сборки\n\nПо имеющимся опциям можно получить краткую справку прямо в терминале.\n\n    ./node_modules/.bin/definer --help\n\n##### Опция `-c, --config`\n\nЕсли директория, в которой выполняется запуск `definer`, содержит файл `definer.json` — сборщик использует его как конфигурационный файл автоматически.\n\nОпция указывает на конфигурационный файл, содержащий все возможные опции сборки в JSON-формате.\n\n    ./node_modules/.bin/definer -c config/definer.json all.js\n\nПути до директорий и файлов следует указывать относительно расположения конфигурационного файла.\n\nОпции, введённые в командной строке имеют приоритет над опциями из конфигурационного файла.\n\n##### Опция `-d, --directory`\n\nОпция указывает откуда следует начать искать модули в файловой системе. Поиск модулей выполняется рекурсивно по всем вложенным директориям.\n\n    ./node_modules/.bin/definer -d modules/ all.js\n\nВозможно указание нескольких директорий через запятую.\n\n    ./node_modules/.bin/definer -d modules/,modules2/ all.js\n\nПо умолчанию definer ищет модули в текущей директории.\n\n##### Опция `-p, --postfix`\n\nОпция задаёт постфикс файлов, в которых будет производиться поиск модулей.\n\n    ./node_modules/.bin/definer -p module.js all.js\n\nПо умолчанию опции установлено значение `js`.\n\n##### Опция `-m, --module`\n\nОпция позволяет указать имя модуля, для которого необходимо выполнить сборку. В результирующий файл попадут только те модули, которые необходимы для указанного модуля.\n\n    ./node_modules/.bin/definer -m c all.js\n\nПо умолчанию собираются все найденные модули.\n\n##### Опция `-v, --verbose`\n\nОпция настраивает вывод информации о сборке.\n\nИнформация делится на типы:\n\n1. `l`, log — информация о процессе сборки (синим цветом)\n2. `i`, info — сообщение о результате сборки (зелёным)\n3. `w`, warn — предупреждения (жёлтым)\n4. `e`, error — ошибки (красным)\n\nСледующий пример будет выводить только предупреждения и ошибки:\n\n    ./node_modules/.bin/definer -v we all.js\n\nИдентичный пример опции в конфигурационном файле:\n\n```json\n{\n    \"verbose\": [\"warn\", \"error\"]\n}\n```\n\nПо умолчанию выводятся все типы информации.\n\n##### Опция `clean`\n\n*Опция может быть указана только в конфигурационном файле.*\n\nОпция указывает пути до файлов, хранящих переменные глобального контекста. Содержимое этих файлов будет включено в результат сборки.\n\nНесколько файлов могут быть объединены в массив, при этом они будут собраны в указанном порядке.\n\n```json\n{\n    \"clean\": {\n        \"$\": [\n            \"jquery.js\",\n            \"jquery.ui.js\",\n            \"jquery.mobile.js\"\n        ],\n        \"_\": \"path/to/underscore.js\"\n    }\n}\n```\n\n[См. также: метод clean](#Метод-clean)\n\n##### Опция `jsdoc`\n\n*Опция может быть указана только в конфигурационном файле.*\n\nОпция формирует JSDoc, содержащий информацию о собранном файле.\n\nВозможно указание относительного пути до JSON-файла, из которого сборщик получит значение одноимённого поля.\n\nТег `date` способен принять значение `true` и заменить его на текущую дату.\n\n```json\n{\n    \"jsdoc\": {\n        \"file\": \"File description\",\n        \"copyright\": \"2014 Artem Kurbatov, tenorok.ru\",\n        \"license\": \"MIT license\",\n        \"version\": \"another.json\",\n        \"date\": true\n    }\n}\n```\n\nРезультат может выглядеть примерно так:\n\n```javascript\n/*!\n * @file File description\n * @copyright 2014 Artem Kurbatov, tenorok.ru\n * @license MIT license\n * @version 0.0.7\n * @date 16 June 2014\n */\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tenorok/definer/issues"
  },
  "homepage": "https://github.com/tenorok/definer",
  "_id": "definer@0.2.3",
  "_from": "definer@~0.2.0"
}
